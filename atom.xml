<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ameng</title>
  
  <subtitle>岛与睡莲</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://amenging.netlify.com/"/>
  <updated>2021-10-04T03:50:08.728Z</updated>
  <id>https://amenging.netlify.com/</id>
  
  <author>
    <name>Ameng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>投影的练习总结</title>
    <link href="https://amenging.netlify.com/uncategorized/shadow/"/>
    <id>https://amenging.netlify.com/uncategorized/shadow/</id>
    <published>2021-10-03T12:48:12.000Z</published>
    <updated>2021-10-04T03:50:08.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>光源角度<br>光源方向（光足）</p><h1 id="简单方块的投影"><a href="#简单方块的投影" class="headerlink" title="简单方块的投影"></a>简单方块的投影</h1><h2 id="方块在地面上的投影"><a href="#方块在地面上的投影" class="headerlink" title="方块在地面上的投影"></a>方块在地面上的投影</h2><h2 id="方块在墙面上的投影"><a href="#方块在墙面上的投影" class="headerlink" title="方块在墙面上的投影"></a>方块在墙面上的投影</h2><h2 id="悬空方块多块投影的练习"><a href="#悬空方块多块投影的练习" class="headerlink" title="悬空方块多块投影的练习"></a>悬空方块多块投影的练习</h2><h1 id="有切割的方块投影"><a href="#有切割的方块投影" class="headerlink" title="有切割的方块投影"></a>有切割的方块投影</h1><h2 id="F的投影"><a href="#F的投影" class="headerlink" title="F的投影"></a>F的投影</h2><h1 id="曲面投影"><a href="#曲面投影" class="headerlink" title="曲面投影"></a>曲面投影</h1><h2 id="圆柱投影"><a href="#圆柱投影" class="headerlink" title="圆柱投影"></a>圆柱投影</h2><h2 id="圆形在椭圆上的投影"><a href="#圆形在椭圆上的投影" class="headerlink" title="圆形在椭圆上的投影"></a>圆形在椭圆上的投影</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;光源角度&lt;br&gt;光源方向（光足）&lt;/p&gt;
&lt;h1 id=&quot;简单方块的投影&quot;&gt;&lt;a href=&quot;#简单方块的投影&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="画画" scheme="https://amenging.netlify.com/tags/%E7%94%BB%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>2020总结</title>
    <link href="https://amenging.netlify.com/uncategorized/2020-summary/"/>
    <id>https://amenging.netlify.com/uncategorized/2020-summary/</id>
    <published>2020-12-17T03:54:03.000Z</published>
    <updated>2021-10-03T12:50:20.919Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉一年过去了，今年太过特别，各种经历回想起来感慨万分…</p><a id="more"></a><blockquote><p>今年的疫情真是猝不及防，而且没想到会持续这么久。因为这个原因，在家里逮到三月底才出来，不过加班并没有减少就是了，幸运的是因此做作业的时间比较充裕，顺利完成了透视课</p></blockquote><h1 id="复盘和计划"><a href="#复盘和计划" class="headerlink" title="复盘和计划"></a>复盘和计划</h1><p>年初立了一些flag</p><ul><li><del>完成k大的透视课程</del></li><li>学完日语初级</li><li><del>做2到3个字幕</del></li><li><del>继续写博客</del></li><li>捡起LeetCode题目</li><li>可以的话，不管哪里去旅游一次</li></ul><p>结果想做的事只做了一半，题目一开始还做了一点，后来又放弃了，日语也是，初级上其实快学完了，不过后来重心在上课上面，暂时搁置。<br>旅游的事是以今年的情况是去不成了，希望病毒早日被解决吧。<br>不过也有开心的事，完成k大三门课程成为三宝了，还有就是学会了playcanvas。</p><h1 id="对写博客的想法"><a href="#对写博客的想法" class="headerlink" title="对写博客的想法"></a>对写博客的想法</h1><h1 id="人生思考"><a href="#人生思考" class="headerlink" title="人生思考"></a>人生思考</h1><p>想以更开放的观念面向外界</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉一年过去了，今年太过特别，各种经历回想起来感慨万分…&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动端开发问题总结</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/ios-andriod/"/>
    <id>https://amenging.netlify.com/技术/ios-andriod/</id>
    <published>2020-09-23T10:44:21.000Z</published>
    <updated>2021-10-03T12:50:20.920Z</updated>
    
    <content type="html"><![CDATA[<p>做了有两年的移动端，其中也遇到各种各样的问题，想着专门写一篇博客做个收集，也便于以后查找<br><a id="more"></a></p><h1 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h1><h2 id="网页上下滑动问题"><a href="#网页上下滑动问题" class="headerlink" title="网页上下滑动问题"></a>网页上下滑动问题</h2><blockquote><p>方法一，touch-action</p></blockquote><ul><li><strong><code>touch-action: pan-x; // 只允许横向滚动</code></strong></li></ul><p>相关文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action</a></p><blockquote><p>方法二，禁止touchmove事件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'touchmove'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.stopPropagation()</span><br><span class="line">  e.preventDefault();</span><br><span class="line">&#125;, &#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;)</span><br></pre></td></tr></table></figure> <!-- more --><h2 id="input-type-”file”-部分安卓机没有显示文件和摄像头的选项"><a href="#input-type-”file”-部分安卓机没有显示文件和摄像头的选项" class="headerlink" title="input type=”file” 部分安卓机没有显示文件和摄像头的选项"></a>input type=”file” 部分安卓机没有显示文件和摄像头的选项</h2><p>加上accept=”image/*”</p><h2 id="ios-部分机型输入完成后软键盘关闭键盘不会下移"><a href="#ios-部分机型输入完成后软键盘关闭键盘不会下移" class="headerlink" title="ios 部分机型输入完成后软键盘关闭键盘不会下移"></a>ios 部分机型输入完成后软键盘关闭键盘不会下移</h2><blockquote><p>解决方法<br>在对应的blur事件加如下代码，注意，如果此方法无效，还需要在对应的父元素加scroll方法（一般应该是最外层的父元素）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/a460550542/article/details/84999408" target="_blank" rel="noopener">https://blog.csdn.net/a460550542/article/details/84999408</a></p><h2 id="canvas-保存图片问题"><a href="#canvas-保存图片问题" class="headerlink" title="canvas 保存图片问题"></a>canvas 保存图片问题</h2><p>（需测试）</p><blockquote><p>toBlob在微信h5无法保存，本机浏览器可以，toDataURL可以。<br>小程序webview用toBlob有成功过的案例，同时用toDataURL部分机型失败</p></blockquote><h2 id="ios-input样式问题"><a href="#ios-input样式问题" class="headerlink" title="ios input样式问题"></a>ios input样式问题</h2><ul><li>ios的input默认有<code>border-radius</code>和<code>-webkit-appearance</code>样式，用<code>border-radius: none</code>和<code>-webkit-appearance: none</code>清除</li><li>ios中input的disabled模式，整体颜色会变浅，如果需要保持原样式使用<code>readOnly</code>属性更好</li></ul><h2 id="ios选中图片文字问题"><a href="#ios选中图片文字问题" class="headerlink" title="ios选中图片文字问题"></a>ios选中图片文字问题</h2><p>ios中图片默认可以选中，文字可以复制，并且点击一个链接或者通过Javascript定义的可点击元素时，会出现一个半透明的灰色背景</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>, <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">  -webkit-tap-highlight-color: rgba(255, 0, 0, 0); // 改变半透明背景颜色</span><br><span class="line">  point-events: none; // 完全禁止</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="长按保存，弹出选项框事件"><a href="#长按保存，弹出选项框事件" class="headerlink" title="长按保存，弹出选项框事件"></a>长按保存，弹出选项框事件</h2><p>安卓触发touchcancel事件，ios触发touchend事件</p><h2 id="ios-z-index失效问题"><a href="#ios-z-index失效问题" class="headerlink" title="ios z-index失效问题"></a>ios z-index失效问题</h2><h1 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h1><h2 id="图片排版中间出现空隙"><a href="#图片排版中间出现空隙" class="headerlink" title="图片排版中间出现空隙"></a>图片排版中间出现空隙</h2><p>设置<code>font-size: 0;</code>或者设置image的<code>display</code>为<code>flex</code></p><h2 id="showLoading和showToast"><a href="#showLoading和showToast" class="headerlink" title="showLoading和showToast"></a>showLoading和showToast</h2><ul><li>showToast和showLoading是冲突的，会显示后设置的那一个</li><li>showLoading的时候加上<code>mask: true</code>更好</li></ul><h2 id="wx-setStorageSync"><a href="#wx-setStorageSync" class="headerlink" title="wx.setStorageSync"></a>wx.setStorageSync</h2><p>在某些机型可能出现问题，使用重要数据时要仔细验证</p><h2 id="小程序自动更新"><a href="#小程序自动更新" class="headerlink" title="小程序自动更新"></a>小程序自动更新</h2><p>小程序默认加上更新代码，以免更新小程序时有缓存</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>做测试的时候注意小程序多个版本，比如从模板消息进入小程序，点击三个点图标可以查看小程序版本</li><li>access_token每天有调用次数限制，需要做缓存</li><li>在进行用户授权/登录前要先让用户体验小程序或者说明小程序的功能，否则审核可能不通过</li><li>页面分享注意设置链接，以免用户将不能直接打开的页面分享出去</li></ul><h1 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h1><h2 id="时间转换问题"><a href="#时间转换问题" class="headerlink" title="时间转换问题"></a>时间转换问题</h2><p><code>Date.parse(new Date(&#39;2020-09-24 12:00:00&#39;))</code><br>这行代码在安卓下输出<code>1522382400000</code>，在ios下输出NaN，ios中要用YYYY/MM/DD的形式，通用代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatTimeStamp</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2018/03/30 12:00:00'</span>)) || <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2018-03-30 12:00:00'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="长短屏适配"><a href="#长短屏适配" class="headerlink" title="长短屏适配"></a>长短屏适配</h2><p>微信最短屏750<em>_1126，今日头条最短屏：750</em>_1096</p><p># </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了有两年的移动端，其中也遇到各种各样的问题，想着专门写一篇博客做个收集，也便于以后查找&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="小程序" scheme="https://amenging.netlify.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="微信h5" scheme="https://amenging.netlify.com/tags/%E5%BE%AE%E4%BF%A1h5/"/>
    
  </entry>
  
  <entry>
    <title>限制字符长度和行数的文本框</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/textarea-line-width-limit/"/>
    <id>https://amenging.netlify.com/技术/textarea-line-width-limit/</id>
    <published>2020-08-07T08:07:42.000Z</published>
    <updated>2021-10-03T12:50:20.921Z</updated>
    
    <content type="html"><![CDATA[<p>因为要做一个用户输入的框，但是最后用户输入的内容要生成海报，所以文字不能输太长，直接输入的话，UI又觉得排版不好看，于是乎提出了新的需求<br><a id="more"></a></p><p><iframe id="cp_embed_GRZgMLK" src="//codepen.io/amenging/embed/GRZgMLK?height=500]&theme-id=dark&slug-hash=GRZgMLK&default-tab=[css,result" scrolling="no" frameborder="no" height="500]" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: %</p>; overflow: hidden;"></iframe></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为要做一个用户输入的框，但是最后用户输入的内容要生成海报，所以文字不能输太长，直接输入的话，UI又觉得排版不好看，于是乎提出了新的需求&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>playcanvas知识点总结</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/playcanvas-guide/"/>
    <id>https://amenging.netlify.com/技术/playcanvas-guide/</id>
    <published>2020-08-06T07:43:26.000Z</published>
    <updated>2021-10-03T12:50:20.921Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为要做新的项目学习了playcanvas，之前是用threejs，<br> <a id="more"></a></p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><ul><li>用户手册：<a href="https://developer.playcanvas.com/zh/user-manual/" target="_blank" rel="noopener">https://developer.playcanvas.com/zh/user-manual/</a></li><li>Api：<a href="https://developer.playcanvas.com/en/api/" target="_blank" rel="noopener">https://developer.playcanvas.com/en/api/</a></li></ul><h1 id="自定义加载"><a href="#自定义加载" class="headerlink" title="自定义加载"></a>自定义加载</h1><p>在设置中的loading scene设置对应js</p><p>官网案例：<br><a href="https://developer.playcanvas.com/zh/tutorials/advance-loading-screen/" target="_blank" rel="noopener">https://developer.playcanvas.com/zh/tutorials/advance-loading-screen/</a></p><h1 id="透明画布"><a href="#透明画布" class="headerlink" title="透明画布"></a>透明画布</h1><ol><li>设置页面 -&gt; RENDERING -&gt; Transparent Canvas 勾选</li><li>将当前摄像机的Clear Color属性设置为00000000</li></ol><h1 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h1><p><a href="https://developer.playcanvas.com/zh/tutorials/sprite-sheets-with-textures/" target="_blank" rel="noopener">https://developer.playcanvas.com/zh/tutorials/sprite-sheets-with-textures/</a></p><h1 id="摄像机轨道控制器"><a href="#摄像机轨道控制器" class="headerlink" title="摄像机轨道控制器"></a>摄像机轨道控制器</h1><p><a href="https://developer.playcanvas.com/zh/tutorials/orbit-camera/" target="_blank" rel="noopener">https://developer.playcanvas.com/zh/tutorials/orbit-camera/</a><br>可以用hammer.js实现更平滑的控制</p><h1 id="物体拖拽、缩放、自动旋转"><a href="#物体拖拽、缩放、自动旋转" class="headerlink" title="物体拖拽、缩放、自动旋转"></a>物体拖拽、缩放、自动旋转</h1><h2 id="鼠标-单指控制物体旋转"><a href="#鼠标-单指控制物体旋转" class="headerlink" title="鼠标/单指控制物体旋转"></a>鼠标/单指控制物体旋转</h2><p><a href="https://developer.playcanvas.com/zh/tutorials/rotating-objects-with-mouse" target="_blank" rel="noopener">https://developer.playcanvas.com/zh/tutorials/rotating-objects-with-mouse</a></p><h2 id="拖拽、双指缩放"><a href="#拖拽、双指缩放" class="headerlink" title="拖拽、双指缩放"></a>拖拽、双指缩放</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用hammerjs</span></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    recognizers:[</span><br><span class="line">        [Hammer.Pinch],</span><br><span class="line">        [Hammer.Pan]</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.hammer = <span class="keyword">new</span> Hammer(app.graphicsDevice.canvas, options);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scaleRadio = <span class="number">1</span>; <span class="comment">// 初始</span></span><br><span class="line"><span class="keyword">var</span> maxSize = <span class="number">3.2</span>, minSize = <span class="number">1</span>; <span class="comment">// 限定大小范围</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dX = <span class="number">0</span>, dY = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> xLimit = <span class="number">100</span>, yLimit = <span class="number">100</span>; <span class="comment">// 限制移动范围</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> pc.Vec3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 存储移动坐标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> moveObject = <span class="keyword">this</span>.moveObject; <span class="comment">// 要操作的对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pinch</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  moveObject.setLocalScale(scaleRadio);</span><br><span class="line"></span><br><span class="line">  marsContainer.setPosition(s.x, s.y, <span class="number">0</span>); <span class="comment">// z固定</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双指缩放</span></span><br><span class="line">hammer.on(<span class="string">"pinchstart"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _scaleRadio = scaleRadio;</span><br><span class="line"></span><br><span class="line">    hammer.on(<span class="string">"pinchout"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        scaleRadio = _scaleRadio * e.scale;</span><br><span class="line">        <span class="keyword">if</span> (scaleRadio &gt; maxSize) scaleRadio = maxSize;</span><br><span class="line">        </span><br><span class="line">        pinch();</span><br><span class="line">    &#125;);</span><br><span class="line">    hammer.on(<span class="string">"pinchin"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        scaleRadio = _scaleRadio * e.scale;</span><br><span class="line">        <span class="keyword">if</span> (scaleRadio &lt; minSize) scaleRadio = minSize;</span><br><span class="line"></span><br><span class="line">        pinch();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动</span></span><br><span class="line">hammer.on(<span class="string">"panstart"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hammer.on(<span class="string">"panmove"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    dX = dX + e.deltaX;</span><br><span class="line">    dY = dY + e.deltaY;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (dY &lt; -yLimit) dY = -yLimit;</span><br><span class="line">    <span class="keyword">if</span> (dY &gt; yLimit) dY = yLimit;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (dX &lt; -xLimit) dX = -xLimit;</span><br><span class="line">    <span class="keyword">if</span> (dX &gt; xLimit) dX = xLimit;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 以750*1624屏幕中心为基准点计算，可自定义</span></span><br><span class="line">    s = _this.cameraEntity.camera.screenToWorld(<span class="number">375</span> + dX, <span class="number">812</span> + dY, _this.cameraEntity.camera.farClip);</span><br><span class="line"></span><br><span class="line">    pinch();</span><br><span class="line">&#125;.bind(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure><h1 id="脚本通信"><a href="#脚本通信" class="headerlink" title="脚本通信"></a>脚本通信</h1><p><a href="https://developer.playcanvas.com/zh/user-manual/scripting/communication/" target="_blank" rel="noopener">https://developer.playcanvas.com/zh/user-manual/scripting/communication/</a></p><h1 id="射线"><a href="#射线" class="headerlink" title="射线"></a>射线</h1><ul><li>案例<br><a href="https://developer.playcanvas.com/zh/tutorials/?tags=raycast" target="_blank" rel="noopener">https://developer.playcanvas.com/zh/tutorials/?tags=raycast</a></li><li>两种射线判断方式<br><a href="https://developer.playcanvas.com/zh/tutorials/entity-picking/" target="_blank" rel="noopener">https://developer.playcanvas.com/zh/tutorials/entity-picking/</a></li></ul><h1 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h1><p>直接调用canvas.toDataURL()是不行的，当前帧可能还没有渲染后，正确的方式是在app的postrender事件中调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Screenshot = pc.createScript(<span class="string">'screenshot'</span>);</span><br><span class="line"></span><br><span class="line">Screenshot.prototype.initialize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._triggerScreenshot = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>._window = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以通过用户点击事件触发</span></span><br><span class="line">    <span class="keyword">this</span>.app.on(<span class="string">'ui:takeScreenshot'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._triggerScreenshot = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Open a new tab</span></span><br><span class="line">        <span class="keyword">this</span>._window = <span class="built_in">window</span>.open(<span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">this</span>._window.document.title = <span class="string">"Screenshot"</span>;</span><br><span class="line">        <span class="keyword">this</span>._window.document.body.style.margin = <span class="string">"0"</span>;</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.app.on(<span class="string">'postrender'</span>, <span class="keyword">this</span>.postRender, <span class="keyword">this</span>); <span class="comment">// 在postrender中调用方法</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Screenshot.prototype.takeScreenshot = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前canvas</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="keyword">this</span>.app.graphicsDevice.canvas;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Show the image data in a new window/tab. </span></span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.src = canvas.toDataURL();</span><br><span class="line">    <span class="keyword">this</span>._window.document.body.appendChild(img);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Screenshot.prototype.postRender = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._triggerScreenshot) &#123;</span><br><span class="line">        <span class="keyword">this</span>.takeScreenshot();</span><br><span class="line">        <span class="keyword">this</span>._triggerScreenshot = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><a href="https://developer.playcanvas.com/zh/tutorials/capturing-a-screenshot" target="_blank" rel="noopener">https://developer.playcanvas.com/zh/tutorials/capturing-a-screenshot</a></p><h1 id="线上贴图加载"><a href="#线上贴图加载" class="headerlink" title="线上贴图加载"></a>线上贴图加载</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从属性添加要改变贴图的材质</span></span><br><span class="line">UiManager.attributes.add(<span class="string">'myMaterial'</span>, &#123;</span><br><span class="line">    title: <span class="string">'myMaterial'</span>,</span><br><span class="line">    description: <span class="string">'贴图'</span>,</span><br><span class="line">    type: <span class="string">'asset'</span>,</span><br><span class="line">    assetType: <span class="string">'material'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">this</span>.myMaterial.resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.app.loader.getHandler(<span class="string">"texture"</span>).crossOrigin = <span class="string">"anonymous"</span>; <span class="comment">// 如果有跨域问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.app.assets.loadFromUrl(url, <span class="string">"texture"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, asset</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> texture = asset.resource;</span><br><span class="line">    </span><br><span class="line">    material.diffuseMap = texture;</span><br><span class="line">    material.update();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="playcanvas与dom的交互"><a href="#playcanvas与dom的交互" class="headerlink" title="playcanvas与dom的交互"></a>playcanvas与dom的交互</h1><ul><li><p>在编辑器使用html和css解析<br>这边可以直接引入vue然后在html中使用，这种方式比较利于管理代码，资源有更新时能保持统一，但是线上编辑器对于html并不友好，开发时没有本地顺畅。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlcssDriver = pc.createScript(<span class="string">'htmlcssDriver'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取html和css资源并载入</span></span><br><span class="line">HtmlcssDriver.prototype.initialize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> htmlAsset = <span class="keyword">this</span>.app.assets.find(<span class="string">'index.html'</span>);</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = htmlAsset.resource;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    htmlAsset.on(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        div.innerHTML = htmlAsset.resource;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cssAsset = <span class="keyword">this</span>.app.assets.find(<span class="string">'main.css'</span>);</span><br><span class="line">    <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(style);</span><br><span class="line">    style.innerHTML = cssAsset.resource;</span><br><span class="line"></span><br><span class="line">    cssAsset.on(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        style.innerHTML = cssAsset.resource;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在外部使用<br>写好程序后打包下载，再到生成的文件夹去写，打包时取消Concatenete Scripts的勾选，这样打包下来的js文件都是分开的，容易修改。使用这种方式代码容易分散，而且打包下来的文件并没有按类型分，而是在不同文件夹，查找文件有一点麻烦，另外就是修改线上资源时要替换代码容易混乱，但是这种方式在处理dom交互逻辑时比线上开发方便，也更容易使用其他插件和库。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因为要做新的项目学习了playcanvas，之前是用threejs，&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="playcanvas" scheme="https://amenging.netlify.com/tags/playcanvas/"/>
    
  </entry>
  
  <entry>
    <title>vue+krpano的基本使用和小行星效果</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/vue-krpano/"/>
    <id>https://amenging.netlify.com/技术/vue-krpano/</id>
    <published>2020-05-21T04:02:20.000Z</published>
    <updated>2021-10-03T12:50:20.922Z</updated>
    
    <content type="html"><![CDATA[<p>做了一个全景的项目，接触到krpano，<br> <a id="more"></a></p><blockquote><p>项目框架：<code>vue</code>+<code>typescript</code></p></blockquote><p><a href="https://img.amenging.top/video/pano-demo.mp4" target="_blank" rel="noopener">最终效果视频</a><br><a href="https://idea.elloworld.cn/reo/index.html" target="_blank" rel="noopener">线上地址</a></p><h1 id="初始化krpano"><a href="#初始化krpano" class="headerlink" title="初始化krpano"></a>初始化krpano</h1><p>引入js：直接用script标签引入即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">let</span> embedpano: any = _window.embedpano <span class="comment">// ts没法直接调用，得转一下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> krpano: any</span><br><span class="line"></span><br><span class="line">embedpano(&#123;</span><br><span class="line">  swf: <span class="literal">null</span>,</span><br><span class="line">  id: panoId, <span class="comment">// 提供的id，最后生成的canvas会使用这个id</span></span><br><span class="line">  xml: <span class="string">'./imgs/scene/pano.xml'</span>, <span class="comment">// xml配置文件</span></span><br><span class="line">  target: <span class="string">'pano'</span>, <span class="comment">// 页面里的div id</span></span><br><span class="line">  consolelog: <span class="literal">false</span>,</span><br><span class="line">  onready: <span class="function">(<span class="params">krpano_interface: any</span>) =&gt;</span> &#123;</span><br><span class="line">    krpano = krpano_interface</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="xml配置文件说明"><a href="#xml配置文件说明" class="headerlink" title="xml配置文件说明"></a>xml配置文件说明</h1><p>krpano的场景及效果都配置在xml里面，平时没怎么接触这种配置格式，不过弄清楚里面的逻辑和规则理解起来就很简单啦</p><h2 id="配置场景"><a href="#配置场景" class="headerlink" title="配置场景"></a>配置场景</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 首先是根元素krpano，其他元素都写在根元素里 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">krpano</span> <span class="attr">debugmode</span>=<span class="string">"false"</span> <span class="attr">logkey</span>=<span class="string">"false"</span> <span class="attr">showerrors</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scene代表场景，设置名称可以在切换场景时使用 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scene</span> <span class="attr">name</span>=<span class="string">"street1"</span> <span class="attr">lat</span>=<span class="string">"0"</span> <span class="attr">lng</span>=<span class="string">"0"</span> <span class="attr">heading</span>=<span class="string">"0.0"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- view用来设置当前的视角 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">hlookat</span>=<span class="string">"0"</span> <span class="attr">vlookat</span>=<span class="string">"0"</span> <span class="attr">vlookatmin</span>=<span class="string">"-50"</span> <span class="attr">vlookatmax</span>=<span class="string">"41"</span> <span class="attr">fovtype</span>=<span class="string">"MFOV"</span> <span class="attr">fov</span>=<span class="string">"120"</span> <span class="attr">fovmin</span>=<span class="string">"80.5"</span> <span class="attr">fovmax</span>=<span class="string">"120"</span> <span class="attr">limitview</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- preview设置预览图，可以在图片加载完成之前做一个过渡 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">preview</span> <span class="attr">url</span>=<span class="string">"panos/street1/preview.jpg"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cube就是设置全景图的切图，其中路径里面的``%s``是一个占位符，只要路径里面的图片名称按krpano的规则来写，它就能自动获取到图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">cube</span> <span class="attr">url</span>=<span class="string">"panos/street1/street1_%s.jpg"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">scene</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">scene</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">krpano</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="小行星效果配置"><a href="#小行星效果配置" class="headerlink" title="小行星效果配置"></a>小行星效果配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小行星效果的实现 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"skin_setup_littleplanetintro"</span> <span class="attr">scope</span>=<span class="string">"local"</span>&gt;</span></span><br><span class="line">    set_hotspot_visible(false);</span><br><span class="line">    set(global.lpinfo, scene=get(xml.scene), hlookat=get(view.hlookat), vlookat=get(view.vlookat), fov=get(view.fov), fovmax=get(view.fovmax), limitview=get(view.limitview));</span><br><span class="line"></span><br><span class="line">    set(view, fovmax=170, limitview=lookto, vlookatmin=90, vlookatmax=90);</span><br><span class="line">    lookat(calc(global.lpinfo.hlookat - 180), 90, 150, 1, 0, 0);</span><br><span class="line">    set(events[lp_events].onloadcomplete,</span><br><span class="line">      delayedcall(0.5,</span><br><span class="line">        if(lpinfo.scene === xml.scene,</span><br><span class="line">          set(control.usercontrol, off);</span><br><span class="line">          set(view, limitview=get(lpinfo.limitview), vlookatmin=null, view.vlookatmax=null);</span><br><span class="line">          tween(view.hlookat|view.vlookat|view.fov|view.distortion, calc('' + lpinfo.hlookat + '|' + lpinfo.vlookat + '|' + lpinfo.fov + '|' + 0.0), 3.0, easeOutQuad);</span><br><span class="line">          delayedcall(3.0,</span><br><span class="line">            set(control.usercontrol, all);</span><br><span class="line">            tween(view.fovmax, get(lpinfo.fovmax));</span><br><span class="line">            delete(global.lpinfo);</span><br><span class="line">            set_hotspot_visible(true);</span><br><span class="line">            if(skin_settings.thumbs AND skin_settings.thumbs_opened, skin_showthumbs() );</span><br><span class="line">          );</span><br><span class="line">          ,</span><br><span class="line">          delete(global.lpinfo);</span><br><span class="line">        );</span><br><span class="line">      );</span><br><span class="line">    );</span><br><span class="line">  <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 初始化加载场景 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"startup"</span> <span class="attr">autorun</span>=<span class="string">"onstart"</span>&gt;</span></span><br><span class="line">    if(startscene === null OR !scene[get(startscene)], copy(startscene,scene[0].name); );</span><br><span class="line">    loadscene(get(startscene), null, MERGE);</span><br><span class="line">    if(startactions !== null, startactions() );</span><br><span class="line">  <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是用来控制热点的显示和隐藏，在小行星动画加载完之前先隐藏所有热点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"set_hotspot_visible"</span>&gt;</span></span><br><span class="line">    for(set(i,0),i LT hotspot.count,inc(i),</span><br><span class="line">       if(%1 == false,</span><br><span class="line">      if(hotspot[get(i)].visible == true,</span><br><span class="line">        set(hotspot[get(i)].mark,true);set(hotspot[get(i)].visible,%1);</span><br><span class="line">        );</span><br><span class="line">      ,</span><br><span class="line">      if(hotspot[get(i)].mark == true OR hotspot[get(i)].mark2 == true,</span><br><span class="line">        set(hotspot[get(i)].visible,%1);</span><br><span class="line">        );</span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">    );</span><br><span class="line">  <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- set(events[lp_events_].onxmlcomplete,null);是为了限制让小行星效果只在初始场景出现，而不是每次切换场景都用小行星 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">events</span> <span class="attr">name</span>=<span class="string">"lp_events_"</span> <span class="attr">keep</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onxmlcomplete</span>=<span class="string">"set(events[lp_events_].onxmlcomplete,null);</span></span></span><br><span class="line"><span class="tag"><span class="string">    if(device.webgl OR device.flash,</span></span></span><br><span class="line"><span class="tag"><span class="string">    skin_setup_littleplanetintro();</span></span></span><br><span class="line"><span class="tag"><span class="string">    ); "</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取点位"><a href="#获取点位" class="headerlink" title="获取点位"></a>获取点位</h2><p>在设置热点的时候，获取热点坐标的必须的，为了更方便地获取坐标，可以在全景图上定一个可以拖动的点位，获取它当前的坐标；<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拖拽事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"draghotspot"</span>&gt;</span></span><br><span class="line">  spheretoscreen(ath, atv, hotspotcenterx, hotspotcentery, calc(mouse.stagex LT stagewidth/2 ? 'l' : 'r'));</span><br><span class="line">  sub(drag_adjustx, mouse.stagex, hotspotcenterx);</span><br><span class="line">  sub(drag_adjusty, mouse.stagey, hotspotcentery);</span><br><span class="line">  asyncloop(pressed,</span><br><span class="line">    sub(dx, mouse.stagex, drag_adjustx);</span><br><span class="line">    sub(dy, mouse.stagey, drag_adjusty);</span><br><span class="line">    screentosphere(dx, dy, ath, atv);</span><br><span class="line">    print_hotspot_pos();</span><br><span class="line">    );</span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scene</span> <span class="attr">name</span>=<span class="string">"street1"</span> <span class="attr">onstart</span>=<span class="string">""</span> <span class="attr">lat</span>=<span class="string">"0"</span> <span class="attr">lng</span>=<span class="string">"0"</span> <span class="attr">heading</span>=<span class="string">"0.0"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">hlookat</span>=<span class="string">"0"</span> <span class="attr">vlookat</span>=<span class="string">"0"</span> <span class="attr">vlookatmin</span>=<span class="string">"-50"</span> <span class="attr">vlookatmax</span>=<span class="string">"41"</span> <span class="attr">fovtype</span>=<span class="string">"MFOV"</span> <span class="attr">fov</span>=<span class="string">"120"</span> <span class="attr">fovmin</span>=<span class="string">"80.5"</span> <span class="attr">fovmax</span>=<span class="string">"120"</span> <span class="attr">limitview</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">preview</span> <span class="attr">url</span>=<span class="string">"panos/street1/preview.jpg"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 下面这两段设置插件和插入热点，注意插件的代码要写在场景内部 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"hotspot_pos_info"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">html</span>=<span class="string">"drag the hotspots..."</span></span></span><br><span class="line"><span class="tag">    <span class="attr">css</span>=<span class="string">"font-family:Courier;font-size: 25px;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">padding</span>=<span class="string">"8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">align</span>=<span class="string">"lefttop"</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">y</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">"200"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enabled</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">hotspot</span> <span class="attr">name</span>=<span class="string">"spot100"</span> <span class="attr">url</span>=<span class="string">"hotspot.png"</span> <span class="attr">distorted</span>=<span class="string">"true"</span> <span class="attr">scale</span>=<span class="string">"0.5"</span> <span class="attr">ath</span>=<span class="string">"+25"</span> <span class="attr">atv</span>=<span class="string">"+5"</span>  <span class="attr">ondown</span>=<span class="string">"draghotspot();"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cube</span> <span class="attr">url</span>=<span class="string">"panos/street1/street1_%s.jpg"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scene</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="js与krpano的通信"><a href="#js与krpano的通信" class="headerlink" title="js与krpano的通信"></a>js与krpano的通信</h1><h2 id="krpano调用js"><a href="#krpano调用js" class="headerlink" title="krpano调用js"></a>krpano调用js</h2><p>在标签上绑定事件调用jscall即可，如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hotspot</span></span></span><br><span class="line"><span class="tag">  <span class="attr">onclick</span>=<span class="string">"jscall(fn())"</span>  /&gt;</span></span><br></pre></td></tr></table></figure></p><p>在vue+ts里面，需要将事件绑定在window上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _window: any = <span class="built_in">window</span></span><br><span class="line"></span><br><span class="line">_window.fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="js执行krpano方法"><a href="#js执行krpano方法" class="headerlink" title="js执行krpano方法"></a>js执行krpano方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call里面写对应的krpano方法，这里的krpano是初始化时给krpano对象的命名</span></span><br><span class="line">krpano.call(<span class="string">'lookat(180, 14.11, 109.8);'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了一个全景的项目，接触到krpano，&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="krpano" scheme="https://amenging.netlify.com/tags/krpano/"/>
    
  </entry>
  
  <entry>
    <title>threejs相机跟随+曲线运动</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/one-three-project/"/>
    <id>https://amenging.netlify.com/技术/one-three-project/</id>
    <published>2020-05-20T09:03:08.000Z</published>
    <updated>2021-10-03T12:50:20.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>项目框架:<code>vue</code>+<code>typescript</code></p></blockquote><p><a href="https://img.amenging.top/video/Video_2020-05-20_171706_x264.mp4" target="_blank" rel="noopener">最终效果视频</a><br><a href="https://idea.elloworld.cn/tomb/index.html/" target="_blank" rel="noopener">线上地址</a></p><a id="more"></a><h2 id="相机跟随曲线运动"><a href="#相机跟随曲线运动" class="headerlink" title="相机跟随曲线运动"></a>相机跟随曲线运动</h2><p>首先要实现人物的曲线运动，坐标点是设计师直接放在模型上的，导入模型后，用模型上的点生成曲线，再用曲线的<code>getPoint</code>方法获取点坐标。</p><h3 id="获取模型上的点并转为世界坐标"><a href="#获取模型上的点并转为世界坐标" class="headerlink" title="获取模型上的点并转为世界坐标"></a>获取模型上的点并转为世界坐标</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> points = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; walkPoints.children.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (walkPoints.children[i].type == <span class="string">'Mesh'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> worldPosition = <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    walkPoints.children[i].getWorldPosition(worldPosition) <span class="comment">// 转为世界坐标</span></span><br><span class="line">    points.push(worldPosition.clone()) <span class="comment">// 存入数组</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成曲线获取新的坐标组"><a href="#生成曲线获取新的坐标组" class="headerlink" title="生成曲线获取新的坐标组"></a>生成曲线获取新的坐标组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ARC_SEGMENTS = <span class="number">50</span> <span class="comment">// 希望得到的点数量</span></span><br><span class="line"></span><br><span class="line">getPoints(points: any) &#123;</span><br><span class="line">  <span class="keyword">let</span> geometry = <span class="keyword">new</span> THREE.BufferGeometry()</span><br><span class="line">  <span class="keyword">let</span> curve: any = <span class="keyword">new</span> THREE.CatmullRomCurve3(points) <span class="comment">// 生成曲线</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> walkPoints = [] <span class="comment">// 最终生成的点数组</span></span><br><span class="line">  <span class="keyword">let</span> point = <span class="keyword">new</span> THREE.Vector3()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ARC_SEGMENTS; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> t = i / (ARC_SEGMENTS - <span class="number">1</span>)</span><br><span class="line">    curve.getPoint(t, point)</span><br><span class="line">    walkPoints.push(point.clone())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> walkPoints</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相机跟随"><a href="#相机跟随" class="headerlink" title="相机跟随"></a>相机跟随</h3><p>将人物和相机放到一个父对象下，用父对象去做运动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private myAnimationBox: any =  <span class="keyword">new</span> THREE.Object3D() <span class="comment">// 父元素</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">this</span>.myAnimationBox.add(obj) <span class="comment">// 添加人</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.myAnimationBox.add(<span class="keyword">this</span>.camera) <span class="comment">// 添加相机</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="用tweenjs动画库实现运动"><a href="#用tweenjs动画库实现运动" class="headerlink" title="用tweenjs动画库实现运动"></a>用tweenjs动画库实现运动</h3><p>这里顺便提一下在vue+typescript里使用tween.js的问题，直接引用threejs里面的tween会报错，所以要<code>npm i @tweenjs/tween.js</code>，再引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import * as T from &apos;@tweenjs/tween.js&apos;</span><br><span class="line">const TWEEN:any = T.default</span><br></pre></td></tr></table></figure></p><p>跟随运动：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// walkPoints即上面使用``getPoint``方法获得的点坐标</span></span><br><span class="line"><span class="comment">// animationIndex是当前的下标</span></span><br><span class="line">_this.myAnimation = <span class="keyword">new</span> TWEEN.Tween(_this.myAnimationBox.position)</span><br><span class="line">.to(&#123;</span><br><span class="line">  x: _this.walkPoints[_this.animationIndex].x / <span class="number">1</span>,</span><br><span class="line">  y: _this.walkPoints[_this.animationIndex].y / <span class="number">1</span>,</span><br><span class="line">  z: _this.walkPoints[_this.animationIndex].z / <span class="number">1</span></span><br><span class="line">&#125;, tweenTime)</span><br><span class="line">.onUpdate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a = _this.myAnimationBox.position.clone()</span><br><span class="line">  a.y += <span class="number">20</span> <span class="comment">// 这里在y轴加20是因为视角要往上一些</span></span><br><span class="line">  _this.control.target.copy(a)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保证相机朝向正确</span></span><br><span class="line">  _this.myAnimationBox.matrix.lookAt(_this.myAnimationBox.position, <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, _this.myAnimationBox.position.y, <span class="number">0</span>), <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">  _this.myAnimationBox.quaternion.setFromRotationMatrix(_this.myAnimationBox.matrix)</span><br><span class="line">&#125;)</span><br><span class="line">.onComplete(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  _this.animationIndex++</span><br><span class="line">  animation(_this.animationIndex)</span><br><span class="line">&#125;)</span><br><span class="line">.start()</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><p>这边要实现一个人物无限向上运动的功能，当然模型不可能做成无限循环的，这边的处理非常简单，就是不停改变模型的位置，使用三组模型，每次把最下面一层移到最上面<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次改变坐标点的Y值，因为X和Z是不变的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; _this.walkPoints.length; j++) &#123;</span><br><span class="line">  _this.walkPoints[j].y += ADD_HEIGHT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> changeIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// roadIndex是一个不断往上增长的数字变量，代表当前所在的层数</span></span><br><span class="line"><span class="comment">// 由此算出现在要移动第几个模型</span></span><br><span class="line"><span class="keyword">if</span> (_this.roadIndex % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">  changeIndex = <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((_this.roadIndex + <span class="number">1</span>) % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">  changeIndex = <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  changeIndex = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ADD_HEIGHT是每层的高度，每次将最下面一层移到最上面</span></span><br><span class="line">_this.groupRoad.children[changeIndex].position.y += ADD_HEIGHT * <span class="number">3</span></span><br><span class="line">_this.groupModel.children[changeIndex].position.y += ADD_HEIGHT * <span class="number">3</span></span><br><span class="line">_this.groupModelShadow.children[changeIndex].position.y += ADD_HEIGHT * <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://threejs.org/examples/#webgl_geometry_extrude_splines" target="_blank" rel="noopener">https://threejs.org/examples/#webgl_geometry_extrude_splines</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;项目框架:&lt;code&gt;vue&lt;/code&gt;+&lt;code&gt;typescript&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://img.amenging.top/video/Video_2020-05-20_171706_x264.mp4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;最终效果视频&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://idea.elloworld.cn/tomb/index.html/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;线上地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="threejs" scheme="https://amenging.netlify.com/tags/threejs/"/>
    
  </entry>
  
  <entry>
    <title>threejs模型闪烁问题</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/threejs-model-flickering/"/>
    <id>https://amenging.netlify.com/技术/threejs-model-flickering/</id>
    <published>2020-04-27T04:31:51.000Z</published>
    <updated>2021-10-03T12:50:20.921Z</updated>
    
    <content type="html"><![CDATA[<p>引起这种现象的原因的是mesh的深度无法确定，所以渲染的时候会出现渲染顺序的问题，具体可参考<a href="https://www.cnblogs.com/lst619247/p/9098845.html" target="_blank" rel="noopener">threejs- z-fighting 问题</a></p><p>解决方法：</p><ol><li>将<code>renderer</code>的<code>sortObjects</code>属性设为<code>false</code></li><li>将<code>material</code>的<code>depthTest</code>属性设为<code>false</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">renderer.sortObjects = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">material.depthTest = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>demo：<br><iframe id="cp_embed_MWamZpW" src="//codepen.io/amenging/embed/MWamZpW?height=300]&theme-id=dark&slug-hash=MWamZpW&default-tab=[css,result" scrolling="no" frameborder="no" height="300]" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><p>参考：<a href="https://www.cnblogs.com/shenwenkai/p/6136321.html" target="_blank" rel="noopener">https://www.cnblogs.com/shenwenkai/p/6136321.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引起这种现象的原因的是mesh的深度无法确定，所以渲染的时候会出现渲染顺序的问题，具体可参考&lt;a href=&quot;https://www.cnblogs.com/lst619247/p/9098845.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;t
      
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="threejs" scheme="https://amenging.netlify.com/tags/threejs/"/>
    
  </entry>
  
  <entry>
    <title>2019总结</title>
    <link href="https://amenging.netlify.com/%E9%9A%8F%E7%AC%94/2019-summary/"/>
    <id>https://amenging.netlify.com/随笔/2019-summary/</id>
    <published>2020-01-07T15:48:30.000Z</published>
    <updated>2021-10-03T12:50:20.919Z</updated>
    
    <content type="html"><![CDATA[<p>今天翻feedly看到很多人写了年终总结，也想凑凑热闹，胡乱写一下流水账。顺便回忆一下hexo怎么用…<br><a id="more"></a></p><p>2019年真是坎坷的一年。</p><p>4月初离职，恍恍惚惚地过了一个月，4月底到上海，过完五一之后，在上海开始了新的生活，有了可以一起看动漫敲代码的室友，中间折腾了挺多东西，却又一事无成。7月底才因为银行卡余额窘迫，开始找工作，第一天面试，第二天上班，一上来就加班了个通宵，在怀疑人生的思考中也坚持过来了，后面的几个月还算轻松，直到年底又开始忙。</p><p>最糟糕的事情就是被迫停止工作那天了，大概是2019最糟糕的一天，简直如同电视剧情节，甚至有点魔幻。但是它也总算结束了我在南京的时光，算是福祸相依吧。</p><p>现在的公司，待着还算舒服，暂时不会离开。</p><p>最大的收获是遇见了k大的课程。</p><p>最大的进步大概是学了three.js。</p><p>十月至今，除了偶尔断掉，每天都在背日语单词。</p><p>看了182部番（b站数量）…不愧是我。</p><p>12月底搬家，换了个比较大的屋子，终于见到了阳光，还买了一张大桌子，一下子起了劲，把拖了半年的字幕做完了。</p><p>2019的遗憾：</p><ul><li>没怎么画画，应该说是没有什么成图，总是画线稿或者上色的时候卡住</li><li>算法刚看没多久就断掉了，题目也没刷</li><li>有些动漫追到半途断掉了</li></ul><p>2020，听起来很科幻的名字。有很多想做的事情，flag高高立起：</p><ul><li>完成k大的透视课程</li><li>学完日语初级</li><li>做2到3个字幕</li><li>继续写博客</li><li>捡起LeetCode题目</li><li>可以的话，不管哪里去旅游一次</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天翻feedly看到很多人写了年终总结，也想凑凑热闹，胡乱写一下流水账。顺便回忆一下hexo怎么用…&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://amenging.netlify.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>mongodb使用用户名密码登录</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/mongodb-user-manage/"/>
    <id>https://amenging.netlify.com/技术/mongodb-user-manage/</id>
    <published>2019-03-27T02:42:17.000Z</published>
    <updated>2019-05-22T12:51:38.001Z</updated>
    
    <content type="html"><![CDATA[<p>环境：<code>ubuntu</code></p><h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择admin数据库</span></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">  user: USERNAME,</span><br><span class="line">  <span class="built_in">pwd</span>: PASSWORD,</span><br><span class="line">  roles: [</span><br><span class="line">      &#123;role: ROLE, db: DBNAME&#125; <span class="comment"># DBNAME是希望授予权限的数据库</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>role代表用户权限，常用的几个：</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>read</td><td>可读当前数据库</td></tr><tr><td>readAnyDatabase</td><td>可以读所有数据库</td></tr><tr><td>readWrite</td><td>可以读写当前数据库</td></tr></tbody></table><p>更详细的在<a href="https://docs.mongodb.com/manual/reference/built-in-roles/#read" target="_blank" rel="noopener">官方文档</a></p><h1 id="修改配置信息"><a href="#修改配置信息" class="headerlink" title="修改配置信息"></a>修改配置信息</h1><p>打开<code>/etc/mongodb.conf</code>，我修改的配置如下<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bind_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span> # 限制为本地访问</span><br><span class="line"><span class="attr">port</span> = <span class="number">50107</span> # 修改默认端口</span><br><span class="line"><span class="attr">auth</span> = <span class="literal">true</span> # 要求登录验证</span><br></pre></td></tr></table></figure></p><h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p>首先关闭mongodb服务再从配置文件启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mongodb stop <span class="comment"># 关闭</span></span><br><span class="line"></span><br><span class="line">nohup mongod --config /etc/mongod.config <span class="comment"># nohup表示后台启动</span></span><br></pre></td></tr></table></figure></p><p>再登录mongodb：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo 127.0.0.1:启动端口号</span><br></pre></td></tr></table></figure></p><p>现在输入<code>show dbs</code>会出现错误，错误信息类似<code>not authorized on admin to execute command</code><br>正确流程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先选择admin数据库</span></span><br><span class="line">use admin</span><br><span class="line"><span class="comment"># 再登录</span></span><br><span class="line">db.auth(<span class="string">"USERNAME"</span>,<span class="string">"PASSWORD"</span>)</span><br><span class="line"><span class="comment"># 在选择有权限的数据库</span></span><br><span class="line">use DBNAME</span><br></pre></td></tr></table></figure></p><h1 id="node连接"><a href="#node连接" class="headerlink" title="node连接"></a>node连接</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MongoClient = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).MongoClient</span><br><span class="line"><span class="comment">// 这里的authSources表示验证需要依赖的数据库名称</span></span><br><span class="line"><span class="comment">// 参考https://blog.csdn.net/szu_lzz/article/details/77435804</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'mongodb://用户名:密码@localhost:端口/数据库名称?authSource=admin'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      mongodb用户管理和修改启动端口
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mongodb" scheme="https://amenging.netlify.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>ae解析摄像机第二步卡住问题</title>
    <link href="https://amenging.netlify.com/%E8%BD%AF%E4%BB%B6/ae-solving-camera/"/>
    <id>https://amenging.netlify.com/软件/ae-solving-camera/</id>
    <published>2018-10-23T06:59:52.000Z</published>
    <updated>2020-01-08T16:26:01.457Z</updated>
    
    <content type="html"><![CDATA[<p>选择跟在摄像机后在<code>效果控件</code>窗口选择<code>高级</code>，勾上<code>详细分析</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;选择跟在摄像机后在&lt;code&gt;效果控件&lt;/code&gt;窗口选择&lt;code&gt;高级&lt;/code&gt;，勾上&lt;code&gt;详细分析&lt;/code&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="软件" scheme="https://amenging.netlify.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="ae" scheme="https://amenging.netlify.com/tags/ae/"/>
    
  </entry>
  
  <entry>
    <title>快捷键映射</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/capstoesc/"/>
    <id>https://amenging.netlify.com/技术/capstoesc/</id>
    <published>2018-09-20T12:19:52.000Z</published>
    <updated>2019-05-22T12:51:37.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><blockquote><p>环境：Win10<br>使用AutoHotkey</p></blockquote><h3 id="创建脚本"><a href="#创建脚本" class="headerlink" title="创建脚本"></a>创建脚本</h3><p>新建文件<code>maps.ahk</code><br>输入<code>CAPSLOCK::esc</code></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>选择<code>AutoHotkey</code>安装目录下的<code>Compiler/Ahk2Exe.exe</code>，其中<code>Source</code>选项选择<code>maps.ahk</code>，然后点击<code>Convert</code>，在<code>maps.ahk</code>同目录下会生成<code>maps.exe</code>， 运行<code>maps.exe</code>即可</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><blockquote><p>环境：ubuntu 14<br>原文来自：<a href="http://vim.wikia.com/wiki/Map_caps_lock_to_escape_in_XWindows" target="_blank" rel="noopener">http://vim.wikia.com/wiki/Map_caps_lock_to_escape_in_XWindows</a></p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>在<code>home</code>目录下新建文件<code>.speedswapper</code>，输入：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">! Swap caps lock and escape</span><br><span class="line">remove Lock = Caps_Lock</span><br><span class="line">keysym Escape = Caps_Lock</span><br><span class="line">keysym Caps_Lock = Escape</span><br><span class="line">add Lock = Caps_Lock</span><br></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmodmap .speedswapper</span><br></pre></td></tr></table></figure></p><p>用vim编辑文件，会发现CapsLock和ESC键的功能已经调换了。<br><!-- ### 持久化运行命令后如果重启系统，Caps和esc的功能又回到了原点。如果希望能保持这个功能，就要开机启动这个脚本。我的实现：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/init/changekey.conf</span><br></pre></td></tr></table></figure></p><p>文件内容输入<code>xmodmap /home/.speedswapper</code>，这时候重启就不会失效啦 –&gt;</p>--></p>]]></content>
    
    <summary type="html">
    
      因为vim编辑时按esc不方便，就想把CapsLock映射成esc，网上找了一些方法也自己尝试了一下，总结了一下
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vim" scheme="https://amenging.netlify.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>兴趣使然的TODO应用</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/todo/"/>
    <id>https://amenging.netlify.com/技术/todo/</id>
    <published>2018-08-23T04:26:53.000Z</published>
    <updated>2019-05-22T12:51:38.002Z</updated>
    
    <content type="html"><![CDATA[<p>项目github：<a href="https://github.com/amenging/php-vue-todo" target="_blank" rel="noopener">https://github.com/amenging/php-vue-todo</a><br>线上地址：<a href="ameng.gz01.bdysite.com">TODO</a></p><p>预览图：<br><img src="http://wx2.sinaimg.cn/mw690/005QPjztgy1fujr7obqbdj310w0jrq3a.jpg" alt="电脑版"><br><img src="http://wx3.sinaimg.cn/mw690/005QPjztgy1fujr99aci8j308k0f8wef.jpg" alt="手机版"></p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><ul><li style="list-style: none"><input type="checkbox" checked> 登录注册</li><li style="list-style: none"><input type="checkbox" checked> 增删改</li><li style="list-style: none"><input type="checkbox" checked> 仅本地储存(localStorage)</li><li style="list-style: none"><input type="checkbox" checked> 导入导出</li></ul><h2 id="食用说明"><a href="#食用说明" class="headerlink" title="食用说明"></a>食用说明</h2><h3 id="不同步到云端功能"><a href="#不同步到云端功能" class="headerlink" title="不同步到云端功能"></a>不同步到云端功能</h3><p>一般用于：</p><ul><li>不想同步到云端数据库的清单<br>注：重要数据及时导出备份和删除</li></ul><h3 id="导入导出功能"><a href="#导入导出功能" class="headerlink" title="导入导出功能"></a>导入导出功能</h3><p>一般用于：</p><ul><li>未同步到云端的清单在不同平台上的迁移；</li><li>重要数据的备份（考虑到主机可能没法续费了..之类的）<br>注：导出到本地的清单再导入时默认不同步云端</li></ul><h2 id="为什么要做这个项目"><a href="#为什么要做这个项目" class="headerlink" title="为什么要做这个项目"></a>为什么要做这个项目</h2><p>做这个项目主要有两个原因，其一是要做的事太多需要整理一下，找了一些事件清单用起来总有点不爽，本来就是希望简洁一点随时记录，其二是因为学完了vue一直没有一个自己的项目，想练练手，所以决定自己倒腾一个。<br>后台为什么用php？当然是因为<del>php是世界上最……</del>其实是因为太穷了买不起服务器就买了个php主机_(:з」∠)_</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>做项目的过程中，首先是复习了一下vue，组件这块还拆得不太好，感觉还是要做好项目的规划啊，目前还比较随心，很多东西就是做的时候才会去想</li><li>时间大部分都花在折腾后台和数据上了，首先并不会php，mysql也忘得差不多了，在做的过程中又重新学了一下，虽然用的都是一些基础的东西，不过对于这么一个小工具还是够啦</li><li>在做的过程中接触了mock.js和yapi，很好用的接口管理工具(<em>/ω＼</em>)</li></ul><p>记录一些用到的东西~</p><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><ul><li><p>判断sql语句返回值是否为空</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql = mysqli_query($conn, $getList);</span><br><span class="line">if (mysqli_num_rows($sql) &gt; 0) &#123;&#125; // 统计查询返回的行数</span><br></pre></td></tr></table></figure></li><li><p>字符串和json的转换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json转字符串</span></span><br><span class="line"><span class="keyword">echo</span>( json_encode(<span class="keyword">array</span>(<span class="string">"name"</span> =&gt; <span class="string">"abc"</span>, <span class="string">"age"</span> =&gt; <span class="number">12</span>)) );</span><br><span class="line"><span class="comment">// '&#123;"name":"abc","age":12&#125;'</span></span><br><span class="line"><span class="comment">// 字符串转json</span></span><br><span class="line"><span class="comment">// 默认返回对象，设置第二个参数为true则返回数组</span></span><br><span class="line">var_dump( json_decode(<span class="string">'&#123;"name":"abc","age":12&#125;'</span>) ); </span><br><span class="line"><span class="comment">// object(stdClass)#1 (2) &#123; ["name"]=&gt; string(3) "abc" ["age"]=&gt; int(12) &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>文件操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line"><span class="comment">// 以写入模式打开filename.txt文件</span></span><br><span class="line"><span class="comment">// w为mode参数，表示写入方式打开，将文件指针指向文件头并将文件大小截为零，文件不存在则创建</span></span><br><span class="line">$myfile = fopen(<span class="string">'filename.txt'</span>, <span class="string">'w'</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'打开文件失败'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="comment">// 将SOMEDATA写入到filename.txt文件</span></span><br><span class="line">fwrite(<span class="string">'filename.txt'</span>, SOMEDATA);</span><br></pre></td></tr></table></figure></li><li><p>密码验证</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加密</span></span><br><span class="line">$hash = password_hash(密码, PASSWORD_DEFAULT);</span><br><span class="line"><span class="comment">// 注意储存密码时字段长度要设置至少为60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line">password_verify(密码, $hash);</span><br></pre></td></tr></table></figure></li><li><p>php输入流</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取POST参数</span></span><br><span class="line"><span class="comment">// php5.6使用POST报错，提示用php://input</span></span><br><span class="line">$data = file_get_contents(<span class="string">"php://input"</span>);</span><br></pre></td></tr></table></figure></li><li><p>cookie</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置cookie</span></span><br><span class="line">setcookie(key, value);</span><br><span class="line"><span class="comment">// 取消cookie</span></span><br><span class="line">setcookie(<span class="string">"username"</span>, <span class="string">""</span>, time() - <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><ul><li><p>执行多条插入语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span> (column1, column2) <span class="keyword">VALUES</span> (value1, value2), (value1 ,value2);</span><br></pre></td></tr></table></figure></li><li><p>字段最大长度问题<br>// 我使用的mysql是5.5.53，最大大小为65535字节， 我的表结构为：</p></li></ul><hr><table><thead><tr><th></th><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td></td><td>items_id</td><td>int(11)</td><td>NO</td><td>PRI</td><td>NULL</td><td>auto_increment</td><td></td></tr><tr><td></td><td>content</td><td>varchar(21840)</td><td>YES</td><td></td><td>NULL</td><td></td><td></td></tr><tr><td></td><td>status</td><td>int(2)</td><td>YES</td><td></td><td>NULL</td><td></td><td></td></tr><tr><td></td><td>list_id</td><td>int(11)</td><td>YES</td><td></td><td>NULL</td><td></td><td></td></tr></tbody></table><hr><p>计算结果为(65535-4*3-2-1)/3 = 21480<br>其中：4为<code>int</code>类型所占字节，2为占位标志，1为null标志位所占字节，字符类型为utf8，所以最后除以3。<br><code>计算规则</code>请看这位大大的博客：<a href="http://www.cnblogs.com/gomysql/p/3615897.html" target="_blank" rel="noopener">http://www.cnblogs.com/gomysql/p/3615897.html</a><br>注：int类型后面的数字不代表字节长度，代表显示的位数，int占4字节</p>]]></content>
    
    <summary type="html">
    
      简单的TODO应用
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="https://amenging.netlify.com/tags/vue/"/>
    
      <category term="php" scheme="https://amenging.netlify.com/tags/php/"/>
    
      <category term="mysql" scheme="https://amenging.netlify.com/tags/mysql/"/>
    
      <category term="todo" scheme="https://amenging.netlify.com/tags/todo/"/>
    
  </entry>
  
  <entry>
    <title>ftp相关问题</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/ftp/"/>
    <id>https://amenging.netlify.com/技术/ftp/</id>
    <published>2018-08-16T01:27:48.000Z</published>
    <updated>2019-05-22T12:51:37.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误一"><a href="#错误一" class="headerlink" title="错误一"></a>错误一</h3><p>打开FTP服务器上的文件夹时发生错误。请检查是否有权限访问该文件夹 550 No such file or directory</p><p>错误原因：<br>复制的时候全选把.git文件选上了，文件路径太深。</p><h3 id="错误二"><a href="#错误二" class="headerlink" title="错误二"></a>错误二</h3><p>FillZilla连接失败，响应:220</p><p>错误原因：主机不支持FTP over TLS连接。<br>解决方式：在站点管理器将<code>加密</code>改为’只使用普通FTP（不安全）’即可</p>]]></content>
    
    <summary type="html">
    
      ftp相关
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="笔记" scheme="https://amenging.netlify.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ftp" scheme="https://amenging.netlify.com/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>谷歌浏览器workspace</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/workspace/"/>
    <id>https://amenging.netlify.com/技术/workspace/</id>
    <published>2018-08-11T07:01:55.000Z</published>
    <updated>2019-05-22T12:51:38.003Z</updated>
    
    <content type="html"><![CDATA[<p>之前在写代码的时候，看见控制台右侧某个文件有一个小绿点，小东西长得真别致😳<br><img src="http://wx1.sinaimg.cn/mw690/005QPjztgy1fu5s9ogsa4j30ab066a9y.jpg" alt=""><br>然后我发现在控制台修改样式的时候，本地文件也会跟着改变，这么神奇的吗？打开百度就去搜……诶等等这东西怎么称呼？小绿点？emmm…没找到是啥，今天突然想起来，谷歌了一下，终于被我找到了（才没有在黑度娘）(ー`´ー)</p><p>官方教程：<a href="https://developers.google.com/web/tools/setup/setup-workflow?hl=zh-cn" target="_blank" rel="noopener">https://developers.google.com/web/tools/setup/setup-workflow?hl=zh-cn</a><br>但不知道是系统版原因还是浏览器版本原因，跟我本地的有些不适用，所以这里记录一下。<br>打开控制台，找到<code>Sources</code>，然后选择FileSystem，点击add就可以添加文件夹了，从此就可以轻轻松松修改样式了~<br><img src="http://wx2.sinaimg.cn/mw690/005QPjztgy1fu5rzo0wp5j30kb040a9w.jpg" alt=""><br>注：对DOM不生效</p>]]></content>
    
    <summary type="html">
    
      修改样式的时候在控制台和编辑器之间切换很麻烦？workspace了解一下
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="chrome" scheme="https://amenging.netlify.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>简单记录xx-net爬墙过程</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/xx-net/"/>
    <id>https://amenging.netlify.com/技术/xx-net/</id>
    <published>2018-08-01T01:25:30.000Z</published>
    <updated>2020-01-08T16:26:01.459Z</updated>
    
    <content type="html"><![CDATA[<p>项目github地址：<a href="https://github.com/XX-net/XX-Net/" target="_blank" rel="noopener">https://github.com/XX-net/XX-Net/</a><br>官方的比较详细，这里就是一个简单的记录_(:з」∠)_</p><p>开始之前：<br>windows检测自己电脑是否支持ipv6：命令行输入<code>netsh int ipv6 show teredo</code>看状态是不是qualified<br>如果你的电脑不支持ipv6，可以参考官方WIKI：<a href="https://github.com/XX-net/XX-Net/wiki/How-to-turn-on-IPv6" target="_blank" rel="noopener">https://github.com/XX-net/XX-Net/wiki/How-to-turn-on-IPv6</a><br>(我自己电脑win7折腾好几遍没什么卵用)<br>linux请看：<a href="https://www.linuxidc.com/Linux/2013-03/80479.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2013-03/80479.htm</a></p><blockquote><p>环境:<br>    win10<br>    XX-Net-3.12.10</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载：<br>    官方下载页面：<a href="https://github.com/XX-net/XX-Net/blob/master/code/default/download.md" target="_blank" rel="noopener">https://github.com/XX-net/XX-Net/blob/master/code/default/download.md</a><br>    百度网盘：链接：<a href="https://pan.baidu.com/s/1TSqHS4uvs0ZuyjU_fOSiHw" target="_blank" rel="noopener">https://pan.baidu.com/s/1TSqHS4uvs0ZuyjU_fOSiHw</a> 密码：sagj</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>下载好运行start.bat脚本就可以用了</p><h3 id="关于证书"><a href="#关于证书" class="headerlink" title="关于证书"></a>关于证书</h3><!-- 证书在``data\gae_proxy``目录下 --><p>官方说明：</p><blockquote><p>GoAgent对https网站，是通过GAE服务获取到内容，再重新加密返回浏览器的。<br>因此https的证书必须重新生成。</p></blockquote><p>浏览器打开<code>http://127.0.0.1:8085</code>就可以看到状态<br>其中有GAEPROXY和X-TUNNEL，GAEPROXY可以部署自己的app-id</p><h3 id="Google的app-id"><a href="#Google的app-id" class="headerlink" title="Google的app-id"></a>Google的app-id</h3><p>官方WIKI：<a href="https://github.com/XX-net/XX-Net/wiki/how-to-create-my-appids" target="_blank" rel="noopener">https://github.com/XX-net/XX-Net/wiki/how-to-create-my-appids</a><br>步骤：</p><ul><li>首先要有谷歌账号</li><li>打开<a href="https://console.cloud.google.com/start" target="_blank" rel="noopener">https://console.cloud.google.com/start</a> ，点击选择项目，然后点击创建项目</li><li>输入项目名称</li><li>在左边菜单栏找到App引擎，选择子菜单的信息中心</li><li>语言选择Python</li><li>区域默认即可</li><li>等待初始化完成，选择XX-Net窗口的部署服务端，并填写app-id</li><li>在弹窗中点击allow</li><li>等待部署完成<br>注：一个app-id每天1G流量</li></ul><h3 id="X-TUNNEL"><a href="#X-TUNNEL" class="headerlink" title="X-TUNNEL"></a>X-TUNNEL</h3><p>X-TUNNEL更加安全，可以购买流量套餐，$4.5三个月300G<br>qq、163什么的邮箱不行哦，注册个Gmail就ok</p><h3 id="SwitchyOmega"><a href="#SwitchyOmega" class="headerlink" title="SwitchyOmega"></a>SwitchyOmega</h3><p>用SwitchyOmega为不同网站选择代理规则</p><p>谷歌插件在下载的文件夹SwitchyOmega/目录内，将.crx文件拖到浏览器的扩展程序即可，安装成功后在右上角有图标，对于不需要代理的网站可以选择直接连接</p><p><img src="http://wx3.sinaimg.cn/mw690/005QPjztgy1ftuebcipy8j305d0cvaa1.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目github地址：&lt;a href=&quot;https://github.com/XX-net/XX-Net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/XX-net/XX-Net/&lt;/a&gt;&lt;br&gt;官方的比较详细，这里
      
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="xx-net" scheme="https://amenging.netlify.com/tags/xx-net/"/>
    
  </entry>
  
  <entry>
    <title>中缀表达式转逆波兰式</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/polish/"/>
    <id>https://amenging.netlify.com/技术/polish/</id>
    <published>2018-07-31T12:32:37.000Z</published>
    <updated>2020-01-08T16:26:01.457Z</updated>
    
    <content type="html"><![CDATA[<p>实现过程：</p><p>1.首先创建两个空数组，result用来存放结果，temp用来存放符号；再创建一个符号集ops存放+-*/符号</p><p>2.转表达式字符为数组，开始遍历数组</p><p>3.如果遇到运算符，直接推入结果数组</p><p>4.遇到括号</p><p>　　1）遇到’(‘，推入暂存区</p><p>　　2）遇到’)’，依次弹出暂存区栈顶运算符直到’(‘，并且删除暂存区的’(‘</p><p>5.遇到运算符</p><p>　　1）如果暂存区</p><p>　　　　①为空</p><p>　　　　②暂存区栈顶为’(‘</p><p>　　　　③当前符号的优先级高于暂存区栈顶运算符</p><p>　　　　这几种情况直接推入栈内</p><p>　　2）否则，将暂存区栈顶运算符弹出并推入结果区，再次进行步骤5</p><p>6.遍历完成则将暂存区剩余运算符依次弹出并推入结果区</p><p>代码链接<br><a href="https://codepen.io/amenging/pen/djdvqR?editors=1111" target="_blank" rel="noopener">https://codepen.io/amenging/pen/djdvqR?editors=1111</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现过程：&lt;/p&gt;
&lt;p&gt;1.首先创建两个空数组，result用来存放结果，temp用来存放符号；再创建一个符号集ops存放+-*/符号&lt;/p&gt;
&lt;p&gt;2.转表达式字符为数组，开始遍历数组&lt;/p&gt;
&lt;p&gt;3.如果遇到运算符，直接推入结果数组&lt;/p&gt;
&lt;p&gt;4.遇到括号&lt;/p
      
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://amenging.netlify.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://amenging.netlify.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javascript" scheme="https://amenging.netlify.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>css笔记</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/css-skill/"/>
    <id>https://amenging.netlify.com/技术/css-skill/</id>
    <published>2018-07-30T08:59:23.000Z</published>
    <updated>2021-10-03T12:50:20.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="background绘图区域"><a href="#background绘图区域" class="headerlink" title="background绘图区域"></a>background绘图区域</h2>  <iframe id="cp_embed_ajEmwm" src="//codepen.io/amenging/embed/ajEmwm?height=300]&theme-id=dark&slug-hash=ajEmwm&default-tab=[css,result" scrolling="no" frameborder="no" height="300]" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>  可以看到div1和div2的背景绘图区域不一样，div1是默认的样式，而div2的背景区域明显可以看到是从padding-box开始绘制的，他们的区别就在于background-repeat属性值不同。<br>  要解释这个问题，首先介绍一下几个属性：</p><blockquote><p>background-clip，默认值：border-box<br>background-origin，默认值：padding-box<br>background-repeat，默认值：repeat</p></blockquote><p>  关于background-repeat，文档中有这样一句：</p><blockquote><p>The image is repeated in this direction as often as needed to cover the background painting area.</p></blockquote><p>  另外：<br>    background-origin决定绘图位置(background position area)，background-clip决定绘图区域(background painting area)<br>  所以div1和div2表现不一样的原因在于div1的background-repeat属性为repeat时，的绘图区域从border-box开始</p><h2 id="绘制指示箭头"><a href="#绘制指示箭头" class="headerlink" title="绘制指示箭头"></a>绘制指示箭头</h2><iframe id="cp_embed_KBZaBx" src="//codepen.io/amenging/embed/KBZaBx?height=300]&theme-id=dark&slug-hash=KBZaBx&default-tab=[css,result" scrolling="no" frameborder="no" height="300]" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="绘制菜单图标"><a href="#绘制菜单图标" class="headerlink" title="绘制菜单图标"></a>绘制菜单图标</h2><p>三条线构成的菜单，鼠标放上去时显示x号<br><iframe id="cp_embed_XBVpyL" src="//codepen.io/amenging/embed/XBVpyL?height=300]&theme-id=dark&slug-hash=XBVpyL&default-tab=[css,result" scrolling="no" frameborder="no" height="300]" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><h2 id="绘制心形"><a href="#绘制心形" class="headerlink" title="绘制心形"></a>绘制心形</h2><iframe id="cp_embed_yxJMpP" src="//codepen.io/amenging/embed/yxJMpP?height=300]&theme-id=dark&slug-hash=yxJMpP&default-tab=[css,result" scrolling="no" frameborder="no" height="300]" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="标签卡片"><a href="#标签卡片" class="headerlink" title="标签卡片"></a>标签卡片</h2><iframe id="cp_embed_EeyWqJ" src="//codepen.io/amenging/embed/EeyWqJ?height=300]&theme-id=dark&slug-hash=EeyWqJ&default-tab=[css,result" scrolling="no" frameborder="no" height="300]" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>]]></content>
    
    <summary type="html">
    
      一些css笔记（持续更）
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="css" scheme="https://amenging.netlify.com/tags/css/"/>
    
      <category term="前端" scheme="https://amenging.netlify.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="https://amenging.netlify.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu虚拟机实现端口映射</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/port/"/>
    <id>https://amenging.netlify.com/技术/port/</id>
    <published>2018-07-30T08:37:19.000Z</published>
    <updated>2020-01-08T16:26:01.458Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/amenging/p/8358649.html" target="_blank" rel="noopener">老物搬运有修改</a></p><p>环境：</p><blockquote><p>ubuntu 14.04.1<br>mongodb v3.4.1<br>虚拟机连接模式为nat连接<br>已安装node环境</p></blockquote><h2 id="一、mongodb启动问题"><a href="#一、mongodb启动问题" class="headerlink" title="一、mongodb启动问题"></a>一、mongodb启动问题</h2><p><img src="http://wx2.sinaimg.cn/mw690/005QPjztgy1fttxoljeq9j30jm02e3yk.jpg" alt=""><br>错误原因：<br>因为mongodb默认的dbpath是/data/db，这个目录只能用root用户创建，创建后在权限上也比较麻烦，所以换个目录 <code>sudo mongod --dbpath /var/lib/mongodb/data/db</code><br><img src="http://wx4.sinaimg.cn/mw690/005QPjztgy1fttxolz79oj30ez00hmwz.jpg" alt=""><br>如果启动失败可能是在/var/lib/mongodb/或者/var/lib/mongodb/data/db/下有.lock文件，用root用户删掉就好，启动成功可以在进程看到：<br><img src="http://wx3.sinaimg.cn/mw690/005QPjztgy1fttxomc5jpj30sd01xwep.jpg" alt=""></p><h2 id="二、端口映射"><a href="#二、端口映射" class="headerlink" title="二、端口映射"></a>二、端口映射</h2><p>mongodb启动成功后运行node项目，我这边端口为3003<br>使用<a href="http://man.linuxde.net/iptables" target="_blank" rel="noopener">iptables</a>命令进行端口映射<br><code>sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3003</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-t：选择要操作的表</span><br><span class="line">-A：添加规则名字，PREROUTING用于目标地址转换</span><br><span class="line">-p：指定要匹配的数据包类型</span><br><span class="line">--dport：请求的端口</span><br><span class="line">-j：动作，REDIRECT表示重定向、映射、透明代理</span><br><span class="line">--to-port：要转到的端口</span><br></pre></td></tr></table></figure><p>添加成功后使用 sudo iptables -t nat -L 查看<br><img src="http://wx1.sinaimg.cn/mw690/005QPjztgy1fttxtx0xjrj30mw064gm2.jpg" alt=""></p><p>我本地主机是win7，在hosts文件添加一条解析（直接用ip也能访问）<br><img src="http://wx1.sinaimg.cn/mw690/005QPjztgy1fttxonuo3cj30960140sh.jpg" alt=""></p><p>本地浏览器输入<code>www.ubuntu.ameng.com</code>即可访问<br><img src="http://wx1.sinaimg.cn/mw690/005QPjztgy1fttxoo8xlgj30y80650sk.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      来做端口映射吧~
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mongodb" scheme="https://amenging.netlify.com/tags/mongodb/"/>
    
      <category term="ubuntu" scheme="https://amenging.netlify.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>git多用户管理</title>
    <link href="https://amenging.netlify.com/%E6%8A%80%E6%9C%AF/gitusers/"/>
    <id>https://amenging.netlify.com/技术/gitusers/</id>
    <published>2018-07-30T08:01:25.000Z</published>
    <updated>2019-05-22T12:51:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/amenging/p/7944504.html" target="_blank" rel="noopener">[老物搬运有修改]</a></p><p>环境: <code>win7 + gitbash</code></p><blockquote><p>有时候在工作和学习时我们有不同的github账户，可能不同项目还有不同的ssh key，或者既有github账户又有码云账户以及自己的gitblit账户，比如我有两个github两个码云以及一个gitblit，一个ssh key怎么够啊摔，所以不同账户的key要好好管理，从本地跑去提交的时候才不会迷路ヽ(￣▽￣)ﾉ</p></blockquote><h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh-key"></a>生成ssh-key</h2><p>在git-bash输入<code>ssh-keygen -t rsa -C &#39;用户邮箱&#39;</code><br>为了便于管理，<code>Enter file in which to save the key</code>最好输入存放key的文件名称，如<code>/c/Users/你的用户名/.ssh/ssh-test</code>，然后enter到最后就可以了~<br><img src="http://wx4.sinaimg.cn/mw690/005QPjztgy1fu5hyvtnsmj30fo08lt8p.jpg" alt=""><br>注：如果没有输入目录则生成的文件在命令行运行的目录下，默认名称<code>id_rsa</code>，建议将key统一放在<code>C:\Users\你的用户名\.ssh</code>目录下<br>生成之后在目录下可以看到：<br><img src="http://wx3.sinaimg.cn/mw690/005QPjztgy1fu5hw15hzdj30gy01ajr6.jpg" alt=""></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>编辑<code>.ssh</code>目录下的<code>config</code>文件（没有则创建），格式如下；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host 别名（如github1）</span><br><span class="line">User 用户名</span><br><span class="line">Hostname github.com（这里才是真正的主机名）</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile 存放公钥的文件（如~<span class="regexp">/.ssh/i</span>d_rsa）</span><br><span class="line">IdentitiesOnly yes</span><br></pre></td></tr></table></figure></p><p>重点来了，本地项目下的<code>.git/config</code>文件中的<strong>remote地址</strong>一定要<strong>跟config文件中的别名</strong>对应！</p><p>以github的ssh地址为例：<br>Host为<code>github001</code>，那么remote地址就为<code>git@github001:你的用户名/你的项目地址</code></p><p>下图左边是我的ssh config配置，右边是两个项目的.git/config配置，可以看到url和host别名是一一对应的(第一个是github，第二个是gitblit)<br><img src="http://wx4.sinaimg.cn/mw690/005QPjztgy1fts32rt2swj30rw0apdgv.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      有时候在工作和学习时我们有不同的github账户，可能不同项目还有不同的ssh key，或者既有github账户又有码云账户以及自己的gitblit账户，比如我有两个github两个码云以及一个gitblit，一个ssh key怎么够啊摔，所以不同账户的key要好好管理，提交的时候才不会迷路ヽ(￣▽￣)ﾉ
    
    </summary>
    
      <category term="技术" scheme="https://amenging.netlify.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="git" scheme="https://amenging.netlify.com/tags/git/"/>
    
  </entry>
  
</feed>
